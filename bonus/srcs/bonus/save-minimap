#include "../../cub3d.h"

// structure pour coordonnees
typedef struct s_mini
{
	int	x;
	int	y;
}		t_mini;

// met le carre rouge du personnage au centre
static void	put_pos(t_image *mini_map, t_gbl *gbl)
{
	char	*pixel;
	int		x;
	int		y;
	(void)gbl;

	y = 52;
	// carre de 3 pixels sur 3 pixels
	while (++y < 57)
	{
		x = 52;
		while (++x < 57)
		{
			// on recupere l'adresse dans la string de la ou on veut mettre un pixel de couleur
			pixel = mini_map->str + (y * mini_map->size_line + x * (mini_map->bpp / 8));
			// et on y met la couleur
			*(int *)pixel = 0x00ff0000;
		}
	}
}

// met les gros carres verts
static void	ft_square(t_mini *coord, t_image *mini_map, int color)
{
	char	*pixel;
	t_mini	save;
	int	x;
	int	y;

	save.x = coord->x;
	save.y = coord->y;
	y = -1;
	// carre de 10 pixels sur 10 pixels (avec la bordure noire)
	while (++y < 10)
	{
		// on reinitialise coord.x au debut de sa boucle (pour faire plusieurs lignes)
		coord->x = save.x;
		x = -1;
		while (++x < 10)
		{
			// protection pour etre a l'interieur de l'image
			if (coord->x >= 0 && coord->y >= 0 && coord->x < 110 && coord->y < 110)
			{
				pixel = mini_map->str + (coord->y * mini_map->size_line
						+ coord->x * (mini_map->bpp / 8));
				if (x == 0 || x == 9 || y == 0 || y == 9 || color == 0)
					// on met du noir pour les bordures des carres verts et pour le vide
					*(int *)pixel = 0x00000000;
				else
					// ou on met du vert
					*(int *)pixel = 0x00006600;
			}
			coord->x++;
		}
		coord->y++;
	}
	// on reinitialise coord.y avant de sortir de la fonction (plusieurs carres au meme y)
	coord->y = save.y;
}

// la mini_maaaaaaaaap !!! 
int	mini_map(char **map, double p_pos[2], t_gbl *gbl)
{
	(void)map;
	t_mini	coord;
	int		x_map;
	int		y_map;


	// fonction d'arrondi : round() floor() ceil() rint() nearbyint()

	// on veut savoir ou commencer nos carres
	coord.x = ((int)round((p_pos[0]) * 10) % 10) - 10;
	coord.y = ((int)round((p_pos[1]) * 10) % 10) - 10;
	// le calcul, on veut recuperer le chiffre des dixiemes de la position pour savoir comment commencer
	// (des carres de 10 pixels, on aura une precision de 1 dixieme)
	// on prend la position (p_pos), on lui ajoute 0.5 (on est au milieu d'une case) et on le multiplie par 10
	// comme ca, on peut avoir le chiffre des dixiemes
	// on arrondit ca, et on fait un modulo 10, comme ca il ne nous reste que la dixieme
	// multiplie par -1 sinon ca n'allait pas dans le bon sens ???
	// et moins 10 pour couvrir toute l'image (on commence en negatif)

	// image de 11 carres sur 11 carres (de 10 pixels) donc image de 110 pixels sur 110 pixels
	printf("y: %d, x: %d\n", coord.y, coord.x);
	while (coord.y < 110)
	{
		while (coord.x < 110)
		{
			// on recupere les coordonnees du carre qu'on veut mettre, pour regarder ou il est dans la map
			x_map = (int)(floor(p_pos[0] - 5.5 + (coord.x / 10)));
			y_map = (int)(floor(p_pos[1] - 5.5 + (coord.y / 10)));
			// le calcul
			// on prend la position (p_pos), on lui soustrait 5.5 (la moitie de 11)
			// on lui ajoute coord (ou on en est dans les carres) divise par 10 (ok ca j'avoue je sais plus)
			// et on l'arrondit pour avoir des coordonnees en int pour checker la map

			// check de si on est dans la map et si on est sur un mur
			if (y_map >= 0 && y_map <= gbl->y_max && x_map >= 0 && x_map <= (int)ft_strlen(map[y_map]) && map[y_map][x_map] == '1')
			{
				// si c'est un mur on met un carre vert
				ft_square(&coord, &gbl->mini_map, 1);
			}
			else
			{
				// sinon on met un carre noir
				ft_square(&coord, &gbl->mini_map, 0);
			}
		}
		// on passe a la "ligne" suivante
		coord.y += 10;
		// on reinitialise coord.x pour la nouvelle "ligne"
		coord.x = ((int)round((p_pos[0]) * 10) % 10) - 10;
	}
	// carre rouge
	put_pos(&gbl->mini_map, gbl);
	// poser la mini_map dans la fenetre
	mlx_put_image_to_window(gbl->mlx, gbl->window, gbl->mini_map.ptr, 680, 480);
	return (0);
}